package com.kslimweb.one2many;

import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;

import com.afollestad.materialdialogs.DialogAction;
import com.afollestad.materialdialogs.MaterialDialog;
import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.SignInButton;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.kslimweb.one2many.client.QRCodeButtonActivity;
import com.kslimweb.one2many.db.Firestore;
import com.kslimweb.one2many.host.SetHostActivity;
import com.kslimweb.one2many.signup.SignUpActivity;

import java.util.Objects;

import static com.kslimweb.one2many.signup.SignUpActivity.fromEmailSignUp;

public class LoginActivity extends AppCompatActivity {

    private final String TAG = LoginActivity.class.getSimpleName();

    // UI references.
    private EditText mEmailView;
    private EditText mPasswordView;
    private GoogleApiClient mGoogleApiClient;
    private SignInButton googleSignInButton;
    private Button mEmailSignInButton;
    private Button signUp;
    private FirebaseAuth mAuth;
    private FirebaseAuth.AuthStateListener mAuthListener;
    ProgressDialog progressDialog;
    private static int RC_SIGN_IN = 100;
    private boolean googleSignIn = false;

    @Override
    protected void onStart() {
        // see whether the device is signed in or not
        super.onStart();
        mAuth.addAuthStateListener(mAuthListener);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Objects.requireNonNull(getSupportActionBar()).setTitle("One2Many Sign In");
        setContentView(R.layout.activity_login);

        findViews();

        TextView googleSignInText = (TextView) googleSignInButton.getChildAt(0);
        googleSignInText.setText("Sign in with Google");

        mAuth = FirebaseAuth.getInstance();

        // as soon as app start, fire up the auth state listener
        // if user is verified email and logged in, goes to next activity

        mAuthListener = firebaseAuth -> {

            if(!this.isFinishing()) {
                if(!fromEmailSignUp) {
                    showProgress();
                }
            }
            Log.i(TAG, "Auth State Fired");
            Log.d(TAG, "onCreate come from email sign up " + fromEmailSignUp);

            if (!fromEmailSignUp) {
                // user already logged in
                if(firebaseAuth.getCurrentUser() != null && !googleSignIn) {
                    Log.d(TAG, "onCreate: Check user email is verified");
                    if(checkIsEmailVerified()) {
                        checkPersonRole();
                    }
                } else {
                    progressDialog.dismiss();
                }
            }
        };

        // Google sign in method
        googleSignInButton.setOnClickListener(v -> googleSignIn());

        // ordinary sign in method
        mEmailSignInButton.setOnClickListener(view ->
                attemptLogin()
        );

        // default_web_client_id auto generated by IDE in parsing JSON
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(getString(R.string.default_web_client_id))
                .requestEmail()
                .build();

        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .enableAutoManage(this, connectionResult -> {
                    if (connectionResult.getErrorMessage() != null) {
                        new MaterialDialog.Builder(LoginActivity.this)
                                .title("Sign in failed")
                                .content(connectionResult.getErrorMessage())
                                .positiveText("Return")
                                .show();
                    }
                })
                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
                .build();

        // Sign up account
        signUp.setOnClickListener(v -> {
            signUp.setHighlightColor(Color.BLACK);
            Intent signUpActivity = new Intent(LoginActivity.this, SignUpActivity.class);
            startActivity(signUpActivity);
        });
    }

    private void findViews() {
        googleSignInButton = findViewById(R.id.google_sign_in_button);
        mEmailView = findViewById(R.id.email);
        mPasswordView = findViewById(R.id.password);
        mEmailSignInButton = findViewById(R.id.email_sign_in_button);
        signUp = findViewById(R.id.sign_up);
    }

    // check person role with get the current user UID and jump activity
    private void checkPersonRole() {
        FirebaseUser firebaseUser = mAuth.getCurrentUser();
        if (firebaseUser == null) {
            Log.d(TAG, "checkPersonRole: firebaseUser is null");
            return;
        }
        jumpActivityOnPersonRole(firebaseUser);
    }

    private void jumpActivityOnPersonRole(FirebaseUser firebaseUser) {
        // get the current user through Firestore path
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        db.collection("users")
                .document(firebaseUser.getUid()).get()
                .addOnCompleteListener(task -> {

                    DocumentSnapshot userDocument = task.getResult();
                    progressDialog.dismiss();

                    if (userDocument != null) {
                        String personRole = userDocument.getString("personRole");
                        if (personRole != null) {
                            finish();
                            if (personRole.equals("Host")) {
                                // go to host activity
                                Log.d(TAG, "checkPersonRole: Teacher");
                                startActivity(new Intent(LoginActivity.this, SetHostActivity.class));

                            } else {
                                // go to client activity
                                Log.d(TAG, "checkPersonRole: Student");
                                startActivity(new Intent(LoginActivity.this, QRCodeButtonActivity.class));
                            }
                        } else {
                            Log.d(TAG, "jumpActivityOnPersonRole: Can't find the Person Role");
                        }
                    } else {
                        Log.d(TAG, "jumpActivityOnPersonRole: Can't find the user's document");
                    }
                });
    }

    private void googleSignIn() {
        showProgress();
        Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
        startActivityForResult(signInIntent, RC_SIGN_IN);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == RC_SIGN_IN) {
            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);

            try {
                // Google Sign In was successful, authenticated with Firebase
                Log.i(TAG, "Google Sign In: Success");
                GoogleSignInAccount account = task.getResult(ApiException.class);
                if (account != null) {
                    firebaseAuthWithGoogle(account);
                }
                googleSignIn = true;

            } catch (ApiException e) {
                // Google Sign In failed, update UI appropriately
                Log.i(TAG, "Google Sign In: failed", e);
                new MaterialDialog.Builder(LoginActivity.this)
                        .content("Google Sign In Failed")
                        .positiveText("Return")
                        .show();
                progressDialog.dismiss();
            }
        }
    }

    // Google sign in
    private void firebaseAuthWithGoogle(GoogleSignInAccount account) {

        AuthCredential credential = GoogleAuthProvider.getCredential(account.getIdToken(), null);

        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(this, task -> {
                    if (task.isSuccessful()) {
                        // Google Sign in success
                        Log.i(TAG, "Firebase Auth Google: success");

                        boolean newuser = task.getResult().getAdditionalUserInfo().isNewUser();
                        if(newuser) {
                            Log.d(TAG, "firebaseAuthWithGoogle: First time user");
                            // prompt first time user register with role
                            setFirstTimeGoogleRegister();
                        } else {
                            Log.d(TAG, "firebaseAuthWithGoogle: Not first time user");
                            checkPersonRole();
                        }
                    } else {
                        // If Google sign in fails, display a message to the user.
                        new MaterialDialog.Builder(LoginActivity.this)
                                .title("Sign In Failed")
                                .content(task.getException().getMessage())
                                .positiveText("Return")
                                .show();
                    }
                });
    }

    private void setFirstTimeGoogleRegister() {
        new MaterialDialog.Builder(LoginActivity.this)
                .customView(R.layout.dialog_spinner, false)
                .title("Please choose your role")
                .cancelable(false)
                .positiveText("Register")
                .onPositive((dialog, which) -> {
                    View view = dialog.getCustomView();
                    if (view != null) {
                        Spinner DialogRoleSpinner = view.findViewById(R.id.dialog_role_spinner);
                        String role =  DialogRoleSpinner.getSelectedItem().toString();
                        Log.d(TAG, "onClick Dialog Spinner: " + role);

                        new Firestore().postToFirestore(mAuth, DialogRoleSpinner, FirebaseFirestore.getInstance());
                        checkPersonRole();
                    }
                })
                .show();
    }

    /**
     * Attempts to sign in or register the account specified by the login form.
     * If there are form errors (invalid email, missing fields, etc.), the
     * errors are presented and no actual login attempt is made.
     */
    private void attemptLogin() {
        // Store values at the time of the login attempt.
        String email = mEmailView.getText().toString().trim();
        String password = mPasswordView.getText().toString();
        showProgress();

        // true for error, false for no error
        if(validateError(email, password)) {
            progressDialog.dismiss();
            return;
        }

        mAuth.signInWithEmailAndPassword(email, password)
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {

                        if(checkIsEmailVerified()) {
                            progressDialog.dismiss();
                            checkPersonRole();
                            Log.d(TAG, "attemptLogin: success ");
                        }
                    } else {
                        new MaterialDialog.Builder(LoginActivity.this)
                                .title("Sign in failed")
                                .content(task.getException().getMessage())
                                .positiveText("Return")
                                .show();
                        progressDialog.dismiss();
                        Log.d(TAG, "attemptLogin: failed ");
                    }
                });
    }

    private boolean checkIsEmailVerified() {
        FirebaseUser user = mAuth.getCurrentUser();
        if (user == null) {
            Log.d(TAG, "checkIsEmailVerified: user is null");
            return false;
        }

        if (user.isEmailVerified()) {
            // user is verified, finish this activity
            Log.i(TAG, "signInWithVerifiedEmail: success");
            return true;
        } else {
            // email is not verified, so just prompt the message to the user
            // NOTE: don't forget to log out the user.
            Log.i(TAG, "signInWithVerifiedEmail: fail");
            mAuth.signOut();
            new MaterialDialog.Builder(LoginActivity.this)
                    .title("Sign in failed")
                    .content("Please verify your email first")
                    .positiveText("Return")
                    .show();
            progressDialog.dismiss();
            return false;
        }
    }

    private boolean isEmailValid(String email) {
        return !TextUtils.isEmpty(email) && android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();
    }

    private boolean isPasswordValid(String password) {
        return password.length() > 4;
    }

    private void showProgress() {

        progressDialog = new ProgressDialog(LoginActivity.this);
        progressDialog.setIndeterminate(true);
        progressDialog.setCancelable(false);
        progressDialog.setMessage("Authenticating...");
        progressDialog.show();
        Log.d(TAG, "showProgress: show");
    }

    public boolean validateError(String email, String password) {

        // Reset errors.
        mEmailView.setError(null);
        mPasswordView.setError(null);

        boolean error = false;
        View focusView = null;

        // Check for a valid password, if the user entered one.
        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {
            mPasswordView.setError(getString(R.string.error_invalid_password));
            focusView = mPasswordView;
            error = true;
        }

        // Check for a valid email address.
        if (TextUtils.isEmpty(email)) {
            mEmailView.setError(getString(R.string.error_field_required));
            focusView = mEmailView;
            error = true;
        } else if (!isEmailValid(email)) {
            mEmailView.setError(getString(R.string.error_invalid_email));
            focusView = mEmailView;
            error = true;
        }

        if (focusView != null) {
            focusView.requestFocus();
        }

        return error;
    }

    @Override
    public void onBackPressed() {
        new MaterialDialog.Builder(LoginActivity.this)
                .icon(getResources().getDrawable(R.drawable.ic_warning_black_24dp))
                .title("Closing Application")
                .content("Are you sure you want to exit?")
                .positiveText("Yes")
                .negativeText("No")
                .onAny((dialog, which) -> {
                    if(which == DialogAction.POSITIVE) {
                        finish();
                        int pid = android.os.Process.myPid();
                        android.os.Process.killProcess(pid);
                    }
                })
                .show();
    }

    @Override
    protected void onPause() {
        super.onPause();
        if ( progressDialog!=null && progressDialog.isShowing() ){
            progressDialog.cancel();
        }
    }
}

